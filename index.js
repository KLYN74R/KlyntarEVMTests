import { Blockchain} from '@ethereumjs/blockchain'
import { Chain, Common, Hardfork } from '@ethereumjs/common'
import { EEI } from '@ethereumjs/vm'
import { Account, Address, toBuffer, setLengthLeft } from '@ethereumjs/util'
import { EVM } from '@ethereumjs/evm'
import { DefaultStateManager } from '@ethereumjs/statemanager'

import {Level} from 'level'



export const testData = {
  _info: {
    comment: '',
    filledwith: 'cpp-1.3.0+commit.70e7d177.Linux.g++',
    source: '../../tests/src/BlockchainTestsFiller/bcValidBlockTest/SimpleTxFiller.json',
  },
  blocks: [
    {
      blockHeader: {
        bloom:
          '0x
        coinbase: '0x8888f1f195afa192cfee860698584c030f4c9db1',
        difficulty: '0x020000',
        extraData: '',
        gasLimit: '0x2fefd8',
        gasUsed: '0x5208',
        hash: '0x117545e24e3d1e1836bb92e3d6f3e77ac5b2ecd171a535830bf9b5afb8f522e5',
        mixHash: '0x0a55dc80ced5e71738a5a15e12f63be192a65c5cb257f8ee10c875c9599b5b52',
        nonce: '0xba58e9414abfa06f',
        number: '0x01',
        parentHash: '0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7',
        receiptTrie: '0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2',
        stateRoot: '0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217',
        timestamp: '0x59af0178',
        transactionsTrie: '0x53d5b71a8fbb9590de82d69dfa4ac31923b0c8afce0d30d0d8d1e931f25030dc',
        uncleHash: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
      },
      rlp: '0xf90260f901f9a07285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217a053d5b71a8fbb9590de82d69dfa4ac31923b0c8afce0d30d0d8d1e931f25030dca0056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2b90100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008302000001832fefd88252088459af017880a00a55dc80ced5e71738a5a15e12f63be192a65c5cb257f8ee10c875c9599b5b5288ba58e9414abfa06ff861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba0f3266921c93d600c43f6fa4724b7abae079b35b9e95df592f95f9f3445e94c88a012f977552ebdb7a492cf35f3106df16ccb4576ebad4113056ee1f52cbe4978c1c0',
      transactions: [
        {
          data: '',
          gasLimit: '0xc350',
          gasPrice: '0x0a',
          nonce: '0x00',
          r: '0xf3266921c93d600c43f6fa4724b7abae079b35b9e95df592f95f9f3445e94c88',
          s: '0x12f977552ebdb7a492cf35f3106df16ccb4576ebad4113056ee1f52cbe4978c1',
          to: '0x095e7baea6a6c7c4c2dfeb977efac326af552d87',
          v: '0x1b',
          value: '0x0a',
        },
      ],
      uncleHeaders: [],
    },
  ],
  genesisBlockHeader: {
    bloom:
      '0x
    coinbase: '0x8888f1f195afa192cfee860698584c030f4c9db1',
    difficulty: '0x020000',
    extraData: '0x42',
    gasLimit: '0x2fefd8',
    gasUsed: '0x00',
    hash: '0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7',
    mixHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
    nonce: '0x0102030405060708',
    number: '0x00',
    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
    receiptTrie: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
    stateRoot: '0xcafd881ab193703b83816c49ff6c2bf6ba6f464a1be560c42106128c8dbc35e7',
    timestamp: '0x54c98c81',
    transactionsTrie: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
    uncleHash: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  },
  genesisRLP:
    '0xf901fcf901f7a00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0cafd881ab193703b83816c49ff6c2bf6ba6f464a1be560c42106128c8dbc35e7a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bfefd8808454c98c8142a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421880102030405060708c0c0',
  lastblockhash: '0x117545e24e3d1e1836bb92e3d6f3e77ac5b2ecd171a535830bf9b5afb8f522e5',
  network: 'Byzantium',
  postState: {
    '0x095e7baea6a6c7c4c2dfeb977efac326af552d87': {
      balance: '0x0a',
      code: '',
      nonce: '0x00',
      storage: {},
    },
    '0x8888f1f195afa192cfee860698584c030f4c9db1': {
      balance: '0x29a2241af62f3450',
      code: '',
      nonce: '0x00',
      storage: {},
    },
    '0x4741c39e6096c192Db6E1375Ff32526512069dF5': {
      balance: '0x025408afa6',
      code: '',
      nonce: '0x01',
      storage: {},
    },
  },
  pre: {
    '0x4741c39e6096c192Db6E1375Ff32526512069dF5': {
      balance: '0x02540be400',
      code: '',
      nonce: '0x00',
      storage: {},
    },
  },
}


// Note: in a future release there will be an EEI default implementation
// which will ease standalone initialization  
  const common = Common.custom({name:'KLYNTAR',networkId:666666,chainId:666666},'petersburg')
  
  const gethDbPath = '../DATABASES/chaindata' // Add your own path here. It will get modified, see remarks.

  const db = new Level(gethDbPath)

  const stateManager = new DefaultStateManager()
  
  const blockchain = await Blockchain.create({

      validateBlocks:true,
      common,
      db

  })


  const eei = new EEI(stateManager, common, blockchain)


  const evm = new EVM({
    common,
    eei,
  })


  
async function setupPreConditions() {

  await eei.checkpoint()

  for (const [addr, acct] of Object.entries(testData.pre)) {
    const { nonce, balance, storage, code } = acct

    const address = new Address(Buffer.from(addr.slice(2), 'hex'))
    const account = Account.fromAccountData({ nonce, balance })
    await eei.putAccount(address, account)

    for (const [key, val] of Object.entries(storage)) {
      const storageKey = setLengthLeft(Buffer.from(key, 'hex'), 32)
      const storageVal = Buffer.from(val, 'hex')
      await eei.putContractStorage(address, storageKey, storageVal)
    }

    const codeBuf = Buffer.from(code.slice(2), 'hex')
    await eei.putContractCode(address, codeBuf)
  }

  await eei.commit()
}


await setupPreConditions()


eei.getAccount(new Address(Buffer.from('4741c39e6096c192Db6E1375Ff32526512069dF5', 'hex'))).then(console.log)


// const codeKLYNTAR = Buffer.from('c1dcab14000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000d048656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415248656c6c6f204b4c594e54415200000000000000000000000000000000','hex')




  // evm
  //   .runCode({
  //     code: codeKLYNTAR,
  //     gasLimit: BigInt(0xffff),
  //   })
  //   .then((results) => {
  //     console.log(`Returned: ${results.returnValue.toString('hex')}`)
  //     console.log(`gasUsed: ${results.executionGasUsed.toString()}`)
  //   })
  //   .catch(console.error)



